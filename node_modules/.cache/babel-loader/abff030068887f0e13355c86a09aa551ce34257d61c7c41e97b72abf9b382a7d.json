{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Belchi\\\\Documents\\\\GitHub\\\\Final-Year-Project\\\\src\\\\StreakTracker.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { supabase } from './supabaseClient';\nimport dayjs from 'dayjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StreakTracker({\n  user\n}) {\n  _s();\n  const [streak, setStreak] = useState(0);\n  useEffect(() => {\n    getStreak();\n  }, []);\n  async function getStreak() {\n    const {\n      data,\n      error\n    } = await supabase.from('tasks').select('date_key').eq('user_id', user.id).eq('is_done', true);\n    if (error) {\n      console.error(error);\n      return;\n    }\n\n    // Get unique completed dates\n    const dates = Array.from(new Set(data.map(task => dayjs(task.date_key).format('YYYY-MM-DD')))).sort((a, b) => dayjs(a).isBefore(b) ? 1 : -1); // latest first\n\n    let count = 0;\n    let currentDate = dayjs();\n    for (let i = 0; i < dates.length; i++) {\n      if (dayjs(dates[i]).isSame(currentDate, 'day')) {\n        count++;\n        currentDate = currentDate.subtract(1, 'day');\n      } else {\n        break;\n      }\n    }\n    setStreak(count);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center mb-6\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-lg font-semibold\",\n      children: [\"\\uD83D\\uDD25 Daily Streak: \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-purple-700\",\n        children: [streak, \" day\", streak === 1 ? '' : 's']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(StreakTracker, \"Q9lwQAWk0wQtVreL6Y+QBdHo3GQ=\");\n_c = StreakTracker;\nvar _c;\n$RefreshReg$(_c, \"StreakTracker\");","map":{"version":3,"names":["useEffect","useState","supabase","dayjs","jsxDEV","_jsxDEV","StreakTracker","user","_s","streak","setStreak","getStreak","data","error","from","select","eq","id","console","dates","Array","Set","map","task","date_key","format","sort","a","b","isBefore","count","currentDate","i","length","isSame","subtract","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Belchi/Documents/GitHub/Final-Year-Project/src/StreakTracker.js"],"sourcesContent":["import { useEffect, useState } from 'react'\r\nimport { supabase } from './supabaseClient'\r\nimport dayjs from 'dayjs'\r\n\r\nexport default function StreakTracker({ user }) {\r\n  const [streak, setStreak] = useState(0)\r\n\r\n  useEffect(() => {\r\n    getStreak()\r\n  }, [])\r\n\r\n  async function getStreak() {\r\n    const { data, error } = await supabase\r\n      .from('tasks')\r\n      .select('date_key')\r\n      .eq('user_id', user.id)\r\n      .eq('is_done', true)\r\n\r\n    if (error) {\r\n      console.error(error)\r\n      return\r\n    }\r\n\r\n    // Get unique completed dates\r\n    const dates = Array.from(\r\n      new Set(data.map((task) => dayjs(task.date_key).format('YYYY-MM-DD')))\r\n    ).sort((a, b) => (dayjs(a).isBefore(b) ? 1 : -1)) // latest first\r\n\r\n    let count = 0\r\n    let currentDate = dayjs()\r\n\r\n    for (let i = 0; i < dates.length; i++) {\r\n      if (dayjs(dates[i]).isSame(currentDate, 'day')) {\r\n        count++\r\n        currentDate = currentDate.subtract(1, 'day')\r\n      } else {\r\n        break\r\n      }\r\n    }\r\n\r\n    setStreak(count)\r\n  }\r\n\r\n  return (\r\n    <div className=\"text-center mb-6\">\r\n      <p className=\"text-lg font-semibold\">\r\n        ðŸ”¥ Daily Streak: <span className=\"text-purple-700\">{streak} day{streak === 1 ? '' : 's'}</span>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,KAAK,MAAM,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzB,eAAe,SAASC,aAAaA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC9C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EAEvCD,SAAS,CAAC,MAAM;IACdW,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,eAAeA,SAASA,CAAA,EAAG;IACzB,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMX,QAAQ,CACnCY,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,UAAU,CAAC,CAClBC,EAAE,CAAC,SAAS,EAAET,IAAI,CAACU,EAAE,CAAC,CACtBD,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC;IAEtB,IAAIH,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAACA,KAAK,CAAC;MACpB;IACF;;IAEA;IACA,MAAMM,KAAK,GAAGC,KAAK,CAACN,IAAI,CACtB,IAAIO,GAAG,CAACT,IAAI,CAACU,GAAG,CAAEC,IAAI,IAAKpB,KAAK,CAACoB,IAAI,CAACC,QAAQ,CAAC,CAACC,MAAM,CAAC,YAAY,CAAC,CAAC,CACvE,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMzB,KAAK,CAACwB,CAAC,CAAC,CAACE,QAAQ,CAACD,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAE,CAAC,EAAC;;IAElD,IAAIE,KAAK,GAAG,CAAC;IACb,IAAIC,WAAW,GAAG5B,KAAK,CAAC,CAAC;IAEzB,KAAK,IAAI6B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,KAAK,CAACc,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,IAAI7B,KAAK,CAACgB,KAAK,CAACa,CAAC,CAAC,CAAC,CAACE,MAAM,CAACH,WAAW,EAAE,KAAK,CAAC,EAAE;QAC9CD,KAAK,EAAE;QACPC,WAAW,GAAGA,WAAW,CAACI,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC;MAC9C,CAAC,MAAM;QACL;MACF;IACF;IAEAzB,SAAS,CAACoB,KAAK,CAAC;EAClB;EAEA,oBACEzB,OAAA;IAAK+B,SAAS,EAAC,kBAAkB;IAAAC,QAAA,eAC/BhC,OAAA;MAAG+B,SAAS,EAAC,uBAAuB;MAAAC,QAAA,GAAC,6BAClB,eAAAhC,OAAA;QAAM+B,SAAS,EAAC,iBAAiB;QAAAC,QAAA,GAAE5B,MAAM,EAAC,MAAI,EAACA,MAAM,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG;MAAA;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9F;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV;AAACjC,EAAA,CA9CuBF,aAAa;AAAAoC,EAAA,GAAbpC,aAAa;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}